---
# vim: set et nosta sw=4 ts=4 ft=textile :
title: Tags
layout: default
index: 1
filters:
  - erb
  - links
  - examples
  - textile
---

h2. <%= page.config['title'] %>

<div id="auto-toc"></div>

h3(#tagsyntax). Tag Syntax

Tags can be in either of two formats:

* XML Pre-processing instruction style: @<?tagname tagdata ?>@
* or the same thing, but with square brackets instead: @[?tagname tagdata ?]@

The second form is especially useful if you're generating HTML and want to put an Inversion tag inside the attribute of an HTML tag, but still want the template to be well-formed:

<?example { syntax: html, caption: "Using square-bracket tags inside an HTML tag" } ?>
<a href="[?call article.permalink ?]">Permalink</a>
<?end ?>

You can mix tag forms in a single document.

h3(#comment). Comment

The @comment@ tag can be used to temporarily stop a section of a document from being rendered:

<?example { syntax: html, caption: "Using square-bracket tags inside an HTML tag" } ?>
<?comment?>
This stuff won't be rendered.
<?end comment ?>
But this stuff will.
<?end?>

Note that the tags inside the comment will still be parsed, so the template's interface won't be affected by the comment:

<?example { syntax: html, caption: "Commenting out an attr tag" } ?>
<?comment?>
<?attr content ?>
<?end comment ?>
<?end?>

If you have @debugging_comments@ enabled in the template <?link "options":Templates#options ?>, sections which are commented out will be rendered as a comment describing what was omitted, surrounded by the comment characters set in @comment_start@ and @comment_end@ <?link "options":Templates#options ?>, respectively.

<?example { syntax: html, caption: "Rendered comment section" } ?>
<!-- Commented out 1 nodes on line 1 -->
<?end?>

You can also embed a description of why the section is commented in the tag body, which will be used as a label when rendering the comment:

<?example { syntax: html, caption: "Commenting with a label" } ?>
<?comment Disabled until there's content ?>
<?attr content ?>
<?end comment ?>
<?end?>

<?example { syntax: html, caption: "Rendered comment with a label" } ?>
<!-- Commented out 1 nodes on line 1: Disabled until there's content -->
<?end?>

h3(#config). Config

The @config@ tag can be used to override template <?link "options":Templates#options ?>
on a per-template basis.  It allows for convenient, inline settings from
within a template rather than from the code in which the template is
loaded.

For example, if you want to enable debugging comments on a single template:

<?example { syntax: html, caption: "Enable debugging comments via the config tag" } ?>
<?config debugging_comments: true ?>
<?end?>

Multiple template options can be set simultaneously by using a YAML hash:

<?example { syntax: html, caption: "Changing multiple template options" } ?>
<?config
    on_render_error: propagate
    debugging_comments: true
    comment_start: /*
    comment_end: */
?>
<?end?>

Note that this also allows you to set multiple options on a single line, when wrapped in braces:

<?example { syntax: html, caption: "Changing multiple template options on one line" } ?>
<?config { comment_start: "/*", comment_end: "*/" } ?>
<?end?>


h3(#placeholders). Placeholders

h4(#attr). Attr

The @attr@ tag is the primary placeholder tag for injecting dynamic values into your templates.  The most basic form is analogous to @attr_accessor@; it defines a method on the template object that, when set, replaces all occurrences of the tag in the template with the value:

<?example { syntax: html, caption: "A basic template attribute" } ?>
Title: <?attr title ?>
<?end?>

Calling the template object's @#title=@ method will inject the stringified value into that part of the output when it's rendered:

<?example { syntax: ruby, caption: "Setting the title attribute" } ?>
template.title = "How to Breed Kangaroos for Milk and Meat"
template.render
# => "Title: How to Breed Kangaroos for Milk and Meat"
<?end?>

The rendered values of an @attr@ tag can also be the result of calling methods on the attr value:

<?example { syntax: html, caption: "An attr tag that calls a method" } ?>
ISBN: <?attr book.isbn ?>
<?end?>

Attributes can be sprintf formatted:

<?example { syntax: html, caption: "An attr tag with formatting" } ?>
Book price: <?attr "%0.2f" % book.price ?>
<?end?>

Attributes can also contain other template objects, which allows templates to be nested within each other easily.

<?example { syntax: ruby, caption: "Nesting templates" } ?>
layout  = Inversion::Template.load( 'layout.tmpl' )
content = Inversion::Template.load( 'content.tmpl' )
content.caption = "Your kids will love their new Kangaroo family!"
layout.body = content
layout.render
<?end?>


h4(#call). Call

@call@ is just an alias for @attr@.  Use whichever strikes your fancy.

h4(#escape). Escape

@escape@ works just like @attr@, but it escapes the content inserted into the template, using the configured escaping behavior.  The supported escaping behaviors are defined in a mixin called @Inversion::Escaping@. The behavior to use can be set using the <?link ":escape_format":Templates#options ?> option on the template, or in a @config@ tag; it defaults to using HTML escaping.

<?example { syntax: html, caption: "Using the escape tag" } ?>
<p>Company name: <?escape company.name ?></p>
<?end?>

If the company was AT&T, the output would look like:

<?example { syntax: html, caption: "Rendered escape tag" } ?>
<p>Company name: AT&amp;T</p>
<?end?>


h4(#urlencode). Uriencode

The @urlencode@ tag is another @attr@-like tag, but this one does URI encoding:

<?example { syntax: html, caption: "Using the uriencode tag" } ?>
<nav>Edit <a href="/profile?name=[?uriencode person.name ?]">your profile</a></nav>
<?end?>


h3(#special-placeholders). Special Placeholders

h4(#timedelta). TimeDelta

If you need to automatically generate a human-readable description of the interval between two times, you can use the @timedelta@ tag:

<?example { syntax: html, caption: "Using the timedelta tag" } ?>
<article class="blogentry">
	<header>
		<p>Posted: <?timedelta entry.date_posted ?>.</p>
	</header>
	...
</article>
<?end?>

The tag supports any object which support the @#to_time@ method, so @Time@, @Date@, and @DateTime@ and anything else that quacks similarly.

Dates are compared against the current time, and render to approximate descriptions of the interval:

* 4 days ago
* about an hour from now
* 6 weeks ago
* less than a minute from now


h3(#import-pubsub). Import and Publish/Subscribe

Both of these tags operate on nested templates: one copies objects from an outer template into an inner one (@import@), and the other publishes sections of content from one template to any other subscribed template.

h4(#import). Import

Occasionally, you'll want to compose output from several different templates by nesting them, but you don't want to have to set common objects on all of them from code. The @import@ tag lets you copy the values from a container template into one intended to be nested within it:

<?example { syntax: html, caption: "Container template (layout.tmpl)" } ?>
Logged in as: <?attr request.authenticated_user ?>
<?attr body ?>
<?end?>

<?example { syntax: html, caption: "Content template (body.tmpl)" } ?>
<?import request ?>
<p>You can check your balance using <a href="[?call request.path_info ?]/accounts">the accounts tool</a>.</p>
<?end?>

When the content template is nested in the container, you only need to set the @request@ attribute on the container to set it in both places:

<?example { syntax: ruby, caption: "" } ?>
layout = Inversion::Template.load( 'layout.tmpl' )
body = Inversion::Template.load( 'body.tmpl' )

layout.body = body
layout.request = request

puts layout.render
<?end?>

Without the use of @import@, you'd need to similarly set the request attribute on the body template.

The imported attribute's value is determined at render time, so you can also use it to import values from an iteration. 

<?example { syntax: html, caption: "Container template (table.tmpl)" } ?>
<table>
	<thead>...</thead>
	<tbody>
		<?for user in assigned_users ?>
		<?attr row ?>
		<?end for ?>
	</tbody>
</table>
<?end?>

<?example { syntax: html, caption: "Content template (row.tmpl)" } ?>
<?import user ?>
		<tr>
			<th>Username:</th><td><?escape user.username ?></td>
			<th>UID:</th><td><?escape user.uid ?></td>
			<th>GID:</th><td><?escape user.gid ?></td>
		</tr>
<?end?>

<?example { syntax: ruby, caption: "Template setup" } ?>
usertable = Inversion::Template.load( 'table.tmpl' )
userrow = Inversion::Template.load( 'row.tmpl' )

usertable.row = userrow
usertable.assigned_users = User.assigned.all

puts usertable.render
<?end?>

When the @row.tmpl@ is rendered each time, its imported @user@ is set to whatever the @user@ in the container is, in this case the next object in @assigned_users@.

You can import values into deeply-nested templates, provided each container imports it as well.


h4(#publish-subscribe). Publish/Subscribe

Often you'll want to set up a generic layout template to establish a global look-and-feel, and then modify it based on the content of an inner template. 

<?example { syntax: html, caption: "Look and feel template (layout.tmpl)" } ?>
<!DOCTYPE HTML>
<html lang="en">
<head>
	<title><?subscribe title || Untitled ?></title>
	<link rel="stylesheet" href="/css/base.css" type="text/css" media="screen" 
		title="Base Stylesheet" charset="utf-8" />
    <?subscribe stylesheets ?>

	<script defer="defer" src="/js/jquery-1.4.2.min.js" type="text/javascript" charset="utf-8"></script>
    <?subscribe scripts ?>
</head>

<body><?attr body ?></body>
</html>
<?end?>


<?example { syntax: html, caption: "A content template (content.tmpl)" } ?>
<?publish title ?>I make stuff up<?end publish?>

<?publish stylesheets ?>
	<link rel="stylesheet" href="/css/content.css" type="text/css" media="screen" 
		title="Content Style Overrides" charset="utf-8" />
<?end publish?>

<?publish scripts ?>
	<script defer="defer" src="/js/content.js" type="text/javascript" charset="utf-8"></script>
<?end publish?>

<div>Hi, there.</div>
<?end?>

<?example { syntax: ruby, caption: "Template setup" } ?>
layout  = Inversion::Template.load( 'layout.tmpl' )
content = Inversion::Template.load( 'content.tmpl' )

layout.body = content

puts layout.render
<?end?>

@subscribe@ renders to an empty string if there is no matching @publish@, or to the value of a default if supplied (as in the HTML title example above.)
In this fashion, you can dynamically switch out different content pages, with each having the ability to optionally override various HTML elements. 

h4(#include). Include

The @include@ tag allows inclusion of other template files from within a template.  This supports separation of a template into several reusable components.  The included template becomes a part of the including template, along with any defaults, attributes and configuration.

<?example { syntax: ruby, caption: "Include setup" } ?>
email = Inversion::Template.load( 'email.tmpl' )

email.greeting = "Kudos"
email.company  = Company[ :spime_thorpe ]
email.user     = User[ :jrandom ]

puts main.render
<?end?>

<?example { syntax: html, caption: "Including template (email.tmpl)" } ?>
Subject: Great news, everybody!
From: <?attr company.email ?>
To: <?attr user.email ?>

<?attr greeting ?>, <?attr user.first_name ?>!

We are excited to inform you that you have been selected to participate
in a challenging and exciting career displacement opportunity!

Please attend the mandatory Man Overboard (tm) session we have scheduled
for you at 8:45AM on Thursday in the Sunshine Room. Light refreshments 
and computer-aided aptitude testing will be provided.

<?import "signature.tmpl" ?>
<?end?>

<?example { syntax: html, caption: "Included template (signature.tmpl)" } ?>

Sincerely, 
Your Friends at <?attr company.name ?>!
<?end?>

<?example { syntax: text, caption: "The rendered output" } ?>
Subject: Great news, everybody!
From: "Spime-Thorpe, Inc." <salesteam2@spime-thorpe.com>
To: "James Random" <jrandom@compusa.com>

Kudos, James!

We are excited to inform you that you have been selected to participate
in a challenging and exciting career displacement opportunity!

Please attend the mandatory Man Overboard (tm) session we have scheduled
for you at 8:45AM on Thursday in the Sunshine Room. Light refreshments 
and computer-aided aptitude testing will be provided.

Sincerely, 
Your Friends at Spime Thorpe!
<?end?>

h4(#render). Render

#TODO

h3(#flowcontrol). Flow Control

The following tags are used to alter the flow of rendering from within templates.

h4(#for). For

The @for@ tag iterates over the objects in a collection, rendering its
template section once for each iteration. Its attribute can be set to anything
that responds to @#each@. The iteration variable(s) are scoped to the block,
and temporarily override any template attributes of the same name.

<?example { syntax: ruby, caption: "'For' tag setup" } ?>
overhead_list = Inversion::Template.load( 'employee_list.tmpl' )
overhead_list.users = User.
	filter( :start_date < 6.months.ago ).
	filter( :department => 'Information Technology' ).all

puts overhead_list.render
<?end?>

The @for@ tag's iteration works just like Ruby's @for@; if the enumerated
value has more than one value, you can give a list of iteration variables to
be assigned to.

<?example { syntax: html, caption: "Employee list using 'For'" } ?>
<table>
	<thead>...</thead>
	<tbody>
		<?for user, i in users.each_with_index ?>
        <tr class="[?if i.even? ?]even[?else?]odd[?end if?]-row">
            <td><?attr user.first_name ?></td>
            <td><?attr user.last_name ?></td>
            <td><?attr user.title ?></td>
            <td><?attr user.start_date ?></td>
            <td><?attr user.salary ?></td>
        </tr>
		<?end for ?>
	</tbody>
</table>
<?end?>

The example above uses a Ruby enumerator for the @#each_with_index@ method to set the class of the row to @'even-row'@ or @'odd-row'@.

This works with the keys and values of Hashes, too:

<?example { syntax: html, caption: "Display hash of notes keyed by author using 'For'" } ?>
<?for user, content in user.notes ?>
<section class="note">
	<header>
		Note by <?call user.username ?>
	</header>
	<p><?escape content ?></p>
</section>

<?end for ?>
<?end?>

Note that you can also use Ruby's "external iterator" syntax to iterate, too:

<?example { syntax: html, caption: "Iterate over each byte of a string with an index using 'For'" } ?>
<section class="hexdump">
<?for byte, index in frame.header.each_byte.with_index ?>
	<?if index.modulo(8).zero? ?>
		<?if index.nonzero? ?>
	</span><br />
		<?end if ?>
	<span class="row"><?attr "0x%08x" % index ?>:
	<?end if ?>
	&nbsp;<code><?attr "0x%02x" % byte ?></code>
<?end for ?>
</section>
<?end?>



h4(#if). If/Elsif/Else

The @if@ tag can be used to conditionally render a section of the template based on the value of an attribute or the value of a method called on it.

<?example { syntax: html, caption: "Conditional block" } ?>
<?if user.has_stock_options? ?>
You will have 21 days to exercise your stock options.
<?else ?>
You have a week to optionally take home a handful of supplies from the
office cabinet.
<?end if ?>
<?end?>


h4(#unless). Unless

Unless is like the @if@ tag, but with inverted logic. Note that an @unless@ can have an @else@ tag, but cannot have any @elsif@ tags within it.


h4(#yield). Yield

The @yield@ tag is used to defer rendering of some part of the template to the code that is calling <?api Inversion::Template#render:"#render" ?> on it. If a block is passed to @#render@, then the @yield@ tag will call it with the <?api Inversion::RenderState ?> object that is currently in effect, and will render the return value in its place.

<?example { syntax: html, caption: "Using 'yield' to defer an expensive database lookup (report.tmpl)" } ?>
<?if extra_details_enabled ?>
<?yield ?>
<?end if ?>

<?example { syntax: ruby, caption: "" } ?>
report = Inversion::Template.load( 'report.tmpl' )
report.extra_details_enabled = true if $DEBUG
puts report.render do
	report_table = Inversion::Template.load( 'table.tmpl' )
	report_table.rows = an_expensive_database_query()
	report_table
end
<?end?>

This will insert the @report_table@ template in place of the yield, but only if $DEBUG is true.


h3(#troubleshooting). Troubleshooting/Introspection

h4(#pp). PP

The @pp@ tag uses the @PP@ library to output an escaped representation of its argument.

<?example { syntax: ruby, caption: "Creating an object to inspect" } ?>
content = Inversion::Template.load( 'content.tmpl' )
content.file = File.stat( '/tmp/example.txt' )

puts content.render
<?end?>

<?example { syntax: html, caption: "Inspecting an object from within a template" } ?>
<div class="debugging">
    The file's stat attributes:
    <?pp file ?>
</div>
<?end?>

The output is escaped according to the current setting of the <?link ":escape_format":Templates#options ?> option.

<?example { syntax: html, caption: "The rendered result" } ?>
<div class="debugging">
    The file's stat attributes:
        #&lt;File::Stat
 dev=0xe000004,
 ino=3064556,
 mode=0100644 (file rw-r--r--),
 nlink=1,
 uid=501 (mahlon),
 gid=0 (wheel),
 rdev=0x0 (0, 0),
 size=0,
 blksize=4096,
 blocks=0,
 atime=2011-08-12 08:43:15 -0700 (1313163795),
 mtime=2011-08-12 08:43:15 -0700 (1313163795),
 ctime=2011-08-12 08:43:15 -0700 (1313163795)&gt;</div>
</div>
<?end?>


h4(#prettyprint). PrettyPrint

#TODO
